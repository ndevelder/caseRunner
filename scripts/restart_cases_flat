#!/usr/bin/env python
# Find epsilon boundary conditions

from subprocess import call
import os,sys
import numpy as np
import json
import glob

# Source the foam-extend bashrc file
call(['/bin/bash','-i','-c','fe32'])

# Input arguments/data
jsonFile=sys.argv[1]

# Set up case dirs
runDir = os.environ.get('FOAM_RUN')
scriptDir = os.path.dirname(os.path.abspath(__file__))
caseRunnerDir = os.path.dirname(scriptDir)

# Load json data
json_data=open(caseRunnerDir+'/cases/'+jsonFile)
case = json.load(json_data)
json_data.close()

# Set up case runs
caseTemplate = case['template']
caseTemplatePath =  caseRunnerDir + '/' + caseTemplate
newCaseRoot = case['name']
newCasePath = runDir + '/' + newCaseRoot

submitFlag = case["submit"]
decomposeFlag = case["decompose"]
epsType = case["epsType"]
serialRun = case["serialRun"]

rPlus 	    = np.array(case["data"]["rplus"])
constantC   = np.array(case["data"]["constantC"])

nCases = rPlus.shape[0]
nCons  = constantC.shape[0]


for n in range(1,nCases+1):
	newCase = newCasePath+'_'+str(rPlus[n-1])+'_'+str(constantC[n-1])
	
	if decomposeFlag == "yes":
		# Reconstruct case
		recresult = call('cd '+newCase+' && reconstructPar && cd ..',shell=True)
		
		# Decompose case
		decresult = call('cd '+newCase+' && decomposePar -force && cd ..',shell=True)

	if submitFlag == 'yes':
		if serialRun == "no":
			bsubresult = call('cd '+newCase+' && bsub < job.mpi && cd ..',shell=True)
		if serialRun == "yes":
			bsubresult = call('cd '+newCase+' && bsub < job.serial.mpi && cd ..',shell=True)

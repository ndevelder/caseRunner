#!/usr/bin/env python
# Find epsilon boundary conditions

from subprocess import call
import os,sys,re
import numpy as np
import json
import glob

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Source the foam-extend bashrc file
call(['/bin/bash','-i','-c','fe32'])

# Input arguments/data
jsonFile=sys.argv[1]

# Set up case dirs
runDir = os.environ.get('FOAM_RUN')
scriptDir = os.path.dirname(os.path.abspath(__file__))
caseRunnerDir = os.path.dirname(scriptDir)

# Load json data
json_data=open(caseRunnerDir+'/cases/'+jsonFile)
case = json.load(json_data)
json_data.close()

# Set up case runs
caseTemplate = case['template']
caseTemplatePath =  caseRunnerDir + '/' + caseTemplate
newCaseRoot = case['name']
newCasePath = runDir + '/' + newCaseRoot

submitFlag = case["submit"]
decomposeFlag = case["decompose"]
epsType = case["epsType"]
serialRun = case["serialRun"]

rPlus 	    = np.array(case["data"]["rplus"])
phiValue       = np.array(case["data"]["phi"])
constantC   = np.array(case["data"]["constantC"])

nCases = rPlus.shape[0]
nCons  = constantC.shape[0]

# Copy and run loop

for n in range(1,nCases+1):
	newCase = newCasePath+'_'+str(rPlus[n-1])+'_'+str(phiValue[n-1])

	# Get case dir list
	mainDir = [os.path.basename(x) for x in glob.glob(newCase+'/[1-9]*')]
	mainDirS = np.array([float(x) for x in mainDir])
	procDir = [os.path.basename(x) for x in glob.glob(newCase+'/processor0/[1-9]*')]
	procDirS = np.array([float(x) for x in procDir])
	
	for f in os.listdir(newCase):
		if re.match('log', f):
			foamlog = f
	
	print '-------------------------------------'
	print bcolors.HEADER + newCase + bcolors.ENDC
	
	errflag = 0
	for line in open(str(newCase + "/" + foamlog)):
		if "Exited" in line:
			errflag = 1
			
	if len(mainDir) > 0:
		print 'Main case dir: ' + bcolors.HEADER + str(np.max(mainDirS)) + bcolors.ENDC
	else:
		print 'No timesteps in main directory'
	
	if len(procDir) > 0:
		print 'Proc1 case dir: ' + bcolors.HEADER + str(np.max(mainDirS)) + bcolors.ENDC
	else:
		print 'No timesteps in proc directory'
		
	if (len(mainDir) > 0 and len(procDir) < 1 and errflag < 1):
		print bcolors.OKGREEN + 'Seems like a running serial case' + bcolors.ENDC
	elif (len(mainDir) > 0 and len(procDir) > 1 and mainDir == procDir):
		print bcolors.OKGREEN + 'Parallel case - Main directory up to date' + bcolors.ENDC
	elif (len(mainDir) < 1 and len(procDir) < 1 and errflag < 1):
		print bcolors.OKGREEN + 'No timesteps recorded - case running' + bcolors.ENDC
	elif (len(mainDir) > 0 and errflag > 0):
		print bcolors.FAIL + 'Case exited - check error log and fix/restart' + bcolors.ENDC
	else:
		print bcolors.WARNING+ 'Case status undetermined' + bcolors.ENDC
	#recresult = call('cd '+newCase+' && reconstructPar && cd ..',shell=True)
